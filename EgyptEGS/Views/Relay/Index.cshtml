@using EgyptEGS.ApiClient.Model
@using Newtonsoft.Json
@using EgyptEGS.Utilities
@using EgyptEGS.Models
@model RelayDataViewModel

@{
    //Layout = null;
    EgyptianInvoice EgyptianInvoice = JsonConvert.DeserializeObject<EgyptianInvoice>(Model.EgyptianInvoiceJson);
    InvoiceSummary InvoiceSummary = JsonConvert.DeserializeObject<InvoiceSummary>(Model.InvoiceSummaryJson);
}

    <main class="flex-grow-1">
        <div class="container py-1">
            <div class="text-center mb-1">
                <img src="~/images/logo.png" alt="EgyptEGS" class="img-fluid" style="max-width: 60px;" />
                <h3 class="mb-1">Manager Io - Egypt eInvoice Reporting</h3>
            <div class="text-warning mb-4">
                    <i class="fas fa-exclamation-triangle"></i>
                    <span>"Please ensure that the Invoice to be processed is complete, correct and error-free."</span>
                </div>
            </div>

            <div class="row g-4">
                <!-- Main Invoice Content -->
                <div class="col-lg-9">
                    <form id="relayForm" method="POST">
                        <!-- Include hidden inputs for all other fields -->
                        <input type="hidden" name="Referrer" value="@Model.Referrer" />
                        <input type="hidden" name="FormKey" value="@Model.FormKey" />
                        <input type="hidden" name="Api" value="@Model.Api" />
                        <input type="hidden" name="Token" value="@Model.Token" />

                        <input type="hidden" name="InvoiceJson" value="@Model.InvoiceJson" />
                        <input type="hidden" name="InvoiceSummaryJson" value="@Model.InvoiceSummaryJson" />
                        
                        <input type="hidden" name="EgyptianInvoiceJson" value="@Model.EgyptianInvoiceJson" />
                        <input type="hidden" name="SerializedInvoice" value="@Model.SerializedInvoice" />
                        <input type="hidden" name="InvoiceSignature" value="@Model.InvoiceSignature" />

                        <input type="hidden" name="IntegrationType" value="@Model.IntegrationType" />
                        <input type="hidden" name="ClientID" value="@Model.ClientID" />
                        <input type="hidden" name="ClientSecret" value="@Model.ClientSecret" />
                        <input type="hidden" name="SignServiceUrl" value="@Model.SignServiceUrl" />

                        <div class="card shadow-sm">
                            <div class="card-header text-center">
                                <h5 class="card-title mb-0">Document Information</h5>
                            </div>
                            <div class="card-body" style="min-height: 605px;">

                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="mb-2">
                                            <label for="DocumentType" class="form-label">Document Type:</label>
                                            <input type="text" class="form-control form-control-sm text-center" id="DocumentType" name="DocumentType" value="@EgyptianInvoice.DocumentType" readonly>
                                        </div>
                                    </div>

                                    <div class="col-md-3">
                                        <div class="mb-2">
                                            <label for="DocumentTypeVersion" class="form-label">Document Type Version:</label>
                                            <input type="text" class="form-control form-control-sm text-center" id="DocumentTypeVersion" name="DocumentTypeVersion" value="@EgyptianInvoice.DocumentTypeVersion" readonly>
                                        </div>
                                    </div>

                                    <div class="col-md-3">
                                        <div class="mb-2">
                                            <label for="DateTimeIssued" class="form-label">DateTime Issued:</label>
                                            <input type="text" class="form-control form-control-sm text-center" id="DateTimeIssued" name="DateTimeIssued" value="@EgyptianInvoice.DateTimeIssued.ToString("yyyy-MM-ddTHH:mm:ssZ")" readonly>
                                        </div>
                                    </div>

                                    <div class="col-md-3">
                                        <div class="mb-2">
                                            <label for="InternalId" class="form-label">Internal Id:</label>
                                            <input type="text" class="form-control form-control-sm text-center" id="InternalId" name="InternalId" value="@EgyptianInvoice.InternalID" readonly>
                                        </div>
                                    </div>

                                </div>

                                <div class="row">

                                    <div class="col-md-6">
                                        <div class="mb-2">
                                            <label for="ReceiverName" class="form-label">Receiver Name:</label>
                                            <input type="text" class="form-control form-control-sm text-center" id="ReceiverName" name="ReceiverName" value="@EgyptianInvoice.Receiver.Name" readonly>
                                        </div>
                                    </div>
                                    @{
                                        if (!Model.DocumentType.ToUpper().Equals("I"))
                                        {
                                            <div class="col-md-3">
                                                <div class="mb-2">
                                                    <label for="DocumentReference" class="form-label">Document Reference:</label>
                                                    <input type="text" class="form-control form-control-sm text-center" id="DocumentReference" name="DocumentReference" value="@string.Join(";", Model.DocumentReference.ToArray())" readonly>
                                                </div>
                                            </div>

                                            <div class="col-md-3">
                                                <div class="mb-2">
                                                    <label for="ServiceDeliveryDate" class="form-label">ServiceDelivery Date:</label>
                                                    <input type="text" class="form-control form-control-sm text-center" id="ServiceDeliveryDate" name="InternalId" value="@Model.ServiceDeliveryDate" readonly>
                                                </div>
                                            </div>
                                        }
                                    }

                                </div>

                                <div class="row">

                                    <div class="col-md-3">
                                        <div class="mb-2">
                                            <label for="CurrencyCode" class="form-label">Currency Code:</label>
                                            <input type="text" class="form-control form-control-sm text-center" id="CurrencyCode" name="CurrencyCode" value="@Model.CurrencyCode" readonly>
                                        </div>
                                    </div>

                                    <div class="col-md-3">
                                        <div class="mb-2">
                                            <label for="NetAmount" class="form-label">Net Amount:</label>
                                            <input type="text" class="form-control form-control-sm text-right" id="NetAmount" name="NetAmount" value="@EgyptianInvoice.NetAmount.ToString("N2")" readonly>
                                        </div>
                                    </div>

                                    <div class="col-md-3">
                                        <div class="mb-2">
                                            <label for="TaxAmount" class="form-label">Tax Amount:</label>
                                            <input type="text" class="form-control form-control-sm text-right" id="TaxAmount" name="TaxAmount" value="@Model.TotalTaxAmount.ToString("N2")" readonly>
                                        </div>
                                    </div>

                                    <div class="col-md-3">
                                        <div class="mb-2">
                                            <label for="TotalAmount" class="form-label">Total Amount:</label>
                                            <input type="text" class="form-control form-control-sm text-right" id="TotalAmount" name="TotalAmount" value="@EgyptianInvoice.TotalAmount.ToString("N2")" readonly>
                                        </div>
                                    </div>
                                </div>

                                <hr style="margin: 5px 0px;" />

                                <!-- Tab Navigation -->
                                <ul class="nav nav-tabs" id="nav-tab" role="tablist">
                                    <li class="nav-item">
                                        <a class="nav-link" id="nav-manager-tab" data-bs-toggle="tab" href="#nav-manager" role="tab" aria-controls="nav-manager" aria-selected="true">Manager Invoice</a>
                                    </li>
                                    <li class="nav-item">
                                    <a class="nav-link active" id="nav-json-tab" data-bs-toggle="tab" href="#nav-json" role="tab" aria-controls="nav-json" aria-selected="false">Egypt Invoice</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" id="nav-response-tab" data-bs-toggle="tab" href="#nav-response" role="tab" aria-controls="nav-response" aria-selected="false">Server Response</a>
                                    </li>
                                </ul>
                                <!-- End Tab Navigation -->
                                <!-- Tab Content -->
                                <div class="tab-content" id="nav-tabContent">
                                    <div class="tab-pane fade" id="nav-manager" role="tabpanel" aria-labelledby="nav-manager-tab">
                                        <div class="mb-2">
                                            <textarea class="form-control form-control-sm" id="textareaManager" name="Invoice" rows="10" readonly wrap="off" style="margin-top: 10px; min-height: 235px; height: 235px;">
                                                @{
                                                    if (Model.InvoiceJson != null)
                                                    {
                                                        try
                                                        {
                                                            var formattedJson = Utils.SerializeObject(JsonConvert.DeserializeObject(Model.InvoiceJson));
                                                            @Html.Raw(formattedJson)
                                                            ;
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            <text>Error processing the Manager invoice: @ex.Message</text>
                                                            ;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <text>No data available</text>
                                                        ;
                                                    }
                                                }
                                            </textarea>
                                        </div>
                                    </div>
                                <div class="tab-pane fade show active" id="nav-json" role="tabpanel" aria-labelledby="nav-json-tab">
                                        <div class="mb-2">
                                            <textarea class="form-control form-control-sm" id="textareaUbl" name="EgyptianInvoice" rows="10" readonly wrap="off" style="margin-top: 17px; min-height: 235px; height: 235px;">
                                                @{
                                                    if (Model.EgyptianInvoiceJson != null)
                                                    {
                                                        try
                                                        {
                                                        var formattedJson = Model.EgyptianInvoiceJson.CleanseJson(true);
                                                            @Html.Raw(formattedJson)
                                                            ;
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            <text>Error processing the Egypt Invoice: @ex.Message</text>
                                                            ;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <text>No data available</text>
                                                        ;
                                                    }
                                                }
                                            </textarea>
                                        </div>
                                    </div>
                                    <div class="tab-pane fade" id="nav-response" role="tabpanel" aria-labelledby="nav-response-tab">
                                        <div class="mb-2">
                                            <textarea class="form-control form-control-sm" id="textareaResponse" name="PortalResult" rows="10" readonly wrap="off" style="margin-top: 10px; min-height: 235px; height: 235px;">
                                                @{
                                                    if (!string.IsNullOrEmpty(Model.ServerResponseJson))
                                                    {
                                                        <text>Invoice Error : </text>
                                                        @Model.ServerResponseJson
                                                        ;
                                                    }
                                                }
                                                </textarea>
                                        </div>
                                    </div>
                                </div>
                                <!-- End Tab Content -->

                                <hr />

                                <div class="d-flex justify-content-between">
                                    <div>
                                        <button type="button" class="btn btn-secondary mt-1" onclick="window.location.href='@Model.Referrer'">Back to Manager</button>
                                    </div>
                                    <div id="buttonsContainer">
                                        <button type="button" 
                                                class="btn btn-success mt-1"
                                                id="updateStatusButton" 
                                                onclick="updateDocumentStatus()" 
                                                style="display: @(InvoiceSummary != null && 
                                                                !string.IsNullOrEmpty(InvoiceSummary?.DocumentStatus) ? "inline-block" : "none")">
                                            <i class="fas fa-sync"></i> Update Status
                                        </button>
                                        <button type="button" 
                                                id="submitInvoiceButton" 
                                                class="btn btn-primary mt-1"
                                                style="display: @(string.IsNullOrEmpty(InvoiceSummary?.DocumentStatus) || 
                                                                InvoiceSummary?.DocumentStatus.ToUpper() == "INVALID" ? "inline-block" : "none")">
                                            <i class="fas fa-paper-plane"></i> 
                                            <span>@(Model.DocumentTypeVersion == "1.0" ? "Sign and Submit Document" : "Submit Document")</span>
                                        </button>
                                        <!-- Modal for signature -->
                                        <div class="modal fade" id="signatureModal" tabindex="-1" aria-labelledby="signatureModalLabel" aria-hidden="true">
                                            <div class="modal-dialog">
                                                <div class="modal-content">
                                                    <div class="modal-header">
                                                        <h5 class="modal-title" id="signatureModalLabel">Document Signature</h5>
                                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                    </div>
                                                    <div class="modal-body">
                                                        <div class="mb-3">
                                                            <label class="form-label">Certificate Information</label>
                                                            <textarea id="certificateInfo" class="form-control" rows="4" wrap="off" readonly></textarea>
                                                        </div>
                                                        <div class="mb-3">
                                                            <label for="tokenPin" class="form-label">Token PIN</label>
                                                            <input type="password" class="form-control" id="tokenPin" required>
                                                        </div>
                                                    </div>
                                                    <div class="modal-footer">
                                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                                        <button type="button" c
                                                            lass="btn btn-primary" 
                                                            id="signAndSubmitButton" 
                                                            onclick="signAndSubmit()"
                                                            @(InvoiceSummary == null ||
                                                                string.IsNullOrEmpty(InvoiceSummary?.DocumentStatus) ||
                                                                InvoiceSummary?.DocumentStatus.ToUpper() == "VALID" ? "" : "disabled")>
                                                            <i class="fas fa-signature"></i>
                                                            <span>Sign and Submit</span>
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>

                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="col-lg-3">
                    <!-- Side widget -->
                    <div class="card">
                        <div class="card-header text-center">
                            <h5 class="card-title mb-0">Submission Info</h5>
                        </div>
                        <div class="card-body" style="min-height: 605px;">
                            <!-- QR Code Section -->
                            <div id="qrCodeImage"
                                 style="background-color: white; width: 180px; height: 180px; margin: 10px auto; border: 1px solid var(--bs-border-color-translucent); display: flex; align-items: center; justify-content: center;">
                                <!-- QR code image will render here -->
                            </div>
                            <!-- QR Code URL -->
                            <div class="text-break text-center"
                                 style="min-height: 20px; margin-top: 18px; font-family: monospace; @(string.IsNullOrEmpty(InvoiceSummary?.PublicUrl) 
                                    ? "color: #fff;" 
                                    : "color: green;") font-weight: bold;">
                                @if (!string.IsNullOrEmpty(InvoiceSummary?.PublicUrl))
                                {
                                    <a href="@InvoiceSummary?.PublicUrl" target="_blank" style="color: inherit; text-decoration: none;">
                                        <i class="fas fa-external-link-alt me-2"></i>View eInvoice
                                    </a>
                                }
                                else
                                {
                                    <span><i class="fas fa-link-slash me-2"></i>No URL Available</span>
                                }
                            </div>
                            <hr />
                                                        <!-- Document Status -->
                            @{
                                var status = InvoiceSummary?.DocumentStatus?.ToUpper() ?? "";
                                var divStyle = status switch
                                {
                                "SUBMITTED" => "min-height: 20px; word-wrap: break-word; overflow-wrap: break-word; font-family: monospace; color: #fff; background-color: #8f4eef; font-weight: bold; padding: 6px; border-radius: 5px; border: 1px solid #8f4eef;",
                                "INVALID" => "min-height: 20px; word-wrap: break-word; overflow-wrap: break-word; font-family: monospace; color: #fff; background-color: #e72000; font-weight: bold; padding: 6px; border-radius: 5px; border: 1px solid #e72000;",
                                "REJECTED" => "min-height: 20px; word-wrap: break-word; overflow-wrap: break-word; font-family: monospace; color: #fff; background-color: #e72000; font-weight: bold; padding: 6px; border-radius: 5px; border: 1px solid #e72000;",
                                "VALID" => "min-height: 20px; word-wrap: break-word; overflow-wrap: break-word; font-family: monospace; color: #fff; background-color: #018524; font-weight: bold; padding: 6px; border-radius: 5px; border: 1px solid #018524;",
                                "CANCELED" => "min-height: 20px; word-wrap: break-word; overflow-wrap: break-word; font-family: monospace; color: #fff; background-color: #747775; font-weight: bold; padding: 6px; border-radius: 5px; border: 1px solid #747775;",
                                    _ => "min-height: 20px; word-wrap: break-word; overflow-wrap: break-word; font-family: monospace; border: 1px solid var(--bs-border-color-translucent); padding: 6px; border-radius: 5px; background-color: var(--bs-card-cap-bg);"
                                };
                            }
                            <div id="documentStatus" class="text-break text-center" style="@divStyle">
                                @if (!string.IsNullOrEmpty(status))
                                {
                                    @status
                                }
                                else
                                {
                                    <span>No status available</span>
                                }
                            </div>
                            <hr />
                            <!-- Invoice Summary JSON -->
                            <textarea class="form-control form-control-sm"
                                      id="summaryTextarea"
                                      name="summaryTextarea"
                                      rows="9"
                                      readonly
                                      wrap="off"
                                      style="min-height: 235px; height: 235px; font-family: monospace;">
                                @{
                                    if (Model.InvoiceSummaryJson != null)
                                    {
                                        try
                                        {
                                            var formattedJson = JsonConvert.SerializeObject(JsonConvert.DeserializeObject(Model.InvoiceSummaryJson),Formatting.Indented);
                                            @Html.Raw(formattedJson)
                                            ;
                                        }
                                        catch (Exception ex)
                                        {
                                            <text>Error processing the invoice summary: @ex.Message</text>
                                            ;
                                        }
                                    }
                                    else
                                    {
                                        <text>No summary data available</text>
                                        ;
                                    }
                                }
                            </textarea>
                        </div>
                    </div>
                </div>
            </div>
    </main>

    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="~/js/qrcode.js"></script>
    
<script>
    let signatureModal;

    function showLoading(message = 'Processing...') {
        Swal.fire({
            title: message,
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => {
                Swal.showLoading();
            }
        });
    }

    function hideLoading() {
        Swal.close();
    }

    function generateQRCode(text) {
        new QRCode(document.getElementById("qrCodeImage"), {
            text: text,
            width: 160,
            height: 160,
            colorDark: "#000000",
            colorLight: "#ffffff",
            correctLevel: QRCode.CorrectLevel.L
        });
    }

    async function submitToServer() {
        try {
            showLoading('Submitting document...');
            const formData = new FormData($('#relayForm')[0]);
            
            const response = await $.ajax({
                url: '@Url.Action("AjaxSubmitInvoice", "Relay")',
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false
            });

            const data = typeof response === 'string' ? JSON.parse(response) : response;
            updateUIElements(data);

            if (data.ApiInvoice) {
                await updateManagerInvoice(data.ApiInvoice);
                await showSuccessMessage('Document has been successfully submitted and updated in Manager');
            } else {
                await showSuccessMessage('Document has been successfully submitted');
            }

        } catch (error) {
            console.error('Error:', error);
            await showErrorMessage('Failed to submit document: ' + (error.responseText || error.message || 'Unknown error'));
        } finally {
            hideLoading();
        }
    }

    async function updateDocumentStatus() {
        try {
            showLoading('Get Document Status...');
            const formData = new FormData($('#relayForm')[0]);

            const response = await $.ajax({
                url: '@Url.Action("AjaxUpdateStatus", "Relay")',
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false
            });

            const data = typeof response === 'string' ? JSON.parse(response) : response;
            
            updateUIElements(data);

            if (data.ApiInvoice) {
                await updateManagerInvoice(data.ApiInvoice);
                await showSuccessMessage('Document status has been successfully processed and updated in Manager');
            } else {
                await showSuccessMessage('Document Status has been successfully processed');
            }

        } catch (error) {
            console.error('Error:', error);
            await showErrorMessage('Failed to submit document: ' + (error.responseText || error.message || 'Unknown error'));
        } finally {
            hideLoading();
        }
    }

    async function updateManagerInvoice(apiInvoice) {
        const response = await fetch(apiInvoice.ApiUrl, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${apiInvoice.SecretKey}`
            },
            body: apiInvoice.Payload
        });

        if (!response.ok) {
            throw new Error('Failed to update Manager invoice');
        }

        // Activate Server Response tab
        document.querySelector('#nav-response-tab').click();
        
        return response;
    }

    function updateUIElements(data) {
        $('#textareaResponse').val(JSON.stringify(data.ApiResponse, null, 2));
        
        if (data.InvoiceSummary) {
            $('input[name="InvoiceSummaryJson"]').val(JSON.stringify(data.InvoiceSummary, null, 2));
            $('#summaryTextarea').val(JSON.stringify(data.InvoiceSummary, null, 2));
            
            // Update document status with styling
            if (data.InvoiceSummary.DocumentStatus) {
                const status = (data.InvoiceSummary.DocumentStatus || '').toUpperCase();
                let divStyle = '';
                
                switch (status) {
                    case 'SUBMITTED':
                        divStyle = 'min-height: 20px; word-wrap: break-word; overflow-wrap: break-word; font-family: monospace; color: #fff; background-color: #8f4eef; font-weight: bold; padding: 6px; border-radius: 5px; border: 1px solid #8f4eef;';
                        break;
                    case 'INVALID':
                        divStyle = 'min-height: 20px; word-wrap: break-word; overflow-wrap: break-word; font-family: monospace; color: #fff; background-color: #e72000; font-weight: bold; padding: 6px; border-radius: 5px; border: 1px solid #e72000;';
                        break;
                    case 'REJECTED':
                        divStyle = 'min-height: 20px; word-wrap: break-word; overflow-wrap: break-word; font-family: monospace; color: #fff; background-color: #e72000; font-weight: bold; padding: 6px; border-radius: 5px; border: 1px solid #e72000;';
                        break;
                    case 'VALID':
                        divStyle = 'min-height: 20px; word-wrap: break-word; overflow-wrap: break-word; font-family: monospace; color: #fff; background-color: #018524; font-weight: bold; padding: 6px; border-radius: 5px; border: 1px solid #018524;';
                        break;
                    case 'CANCELED':
                        divStyle = 'min-height: 20px; word-wrap: break-word; overflow-wrap: break-word; font-family: monospace; color: #fff; background-color: #747775; font-weight: bold; padding: 6px; border-radius: 5px; border: 1px solid #747775;';
                        break;
                    default:
                        divStyle = 'min-height: 20px; word-wrap: break-word; overflow-wrap: break-word; font-family: monospace; border: 1px solid var(--bs-border-color-translucent); padding: 6px; border-radius: 5px; background-color: var(--bs-card-cap-bg);';
                }
                
                const documentStatus = document.getElementById('documentStatus');
                documentStatus.setAttribute('style', `${divStyle} text-break text-center`);
                documentStatus.textContent = status || 'No status available';
            }
            // Update button states
            const submitButton = document.getElementById('submitInvoiceButton');
            const updateButton = document.getElementById('updateStatusButton');
            
            submitButton.style.display = (data.InvoiceSummary.DocumentStatus === '' || 
                                        data.InvoiceSummary.DocumentStatus.toUpperCase() === 'INVALID') 
                                        ? 'inline-block' : 'none';
            
            updateButton.style.display = (data.InvoiceSummary.DocumentStatus && data.InvoiceSummary.SubmissionId)
                                       ? 'inline-block' : 'none';
            // Update QR Code and Public URL separately
            $('#qrCodeImage').empty();
            if (data.InvoiceSummary.PublicUrl) {
                generateQRCode(data.InvoiceSummary.PublicUrl);
                // Update only the URL container, not the status
                $('.text-break:not(#documentStatus)').html(`<a href="${data.InvoiceSummary.PublicUrl}" target="_blank" style="color: inherit; text-decoration: none;">
                    <i class="fas fa-external-link-alt me-2"></i>View eInvoice
                </a>`);
            } else {
                $('.text-break:not(#documentStatus)').html(`<span><i class="fas fa-link-slash me-2"></i>No URL Available</span>`);
            }
        }
    }

    async function handleSubmit(e) {
        if (e) e.preventDefault();
        
        if ('@Model.DocumentTypeVersion' === '1.0') {
            try {
                const signUrl = '@Model.SignServiceUrl';
                const certResponse = await fetch(`${signUrl}/getcert`);

                if (!certResponse.ok) throw new Error('Failed to get certificate');

                const certData = await certResponse.json();
                document.getElementById('certificateInfo').value = JSON.stringify(certData, null, 2);

                // Initialize modal before showing
                signatureModal = new bootstrap.Modal(document.getElementById('signatureModal'), {
                    backdrop: 'static',
                    keyboard: false
                });
                
                // Add event listeners
                document.getElementById('signatureModal').addEventListener('hidden.bs.modal', function () {
                    closeSignatureModal();
                });
                
                document.querySelector('[data-bs-dismiss="modal"]').addEventListener('click', function() {
                    closeSignatureModal();
                });

                signatureModal.show();
                
            } catch (error) {
                await showErrorMessage('Error getting certificate: ' + error.message);
            }
        } else {
            await submitToServer();
        }
    }

    async function signAndSubmit() {
        const pin = document.getElementById('tokenPin').value;
        
        if (!pin) {
            await showErrorMessage('Please enter PIN');
            return;
        }

        try {
            showLoading('Signing document...');
            const signUrl = '@Model.SignServiceUrl';
            const signResponse = await fetch(`${signUrl}/sign`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    SerializedInvoice: '@Model.SerializedInvoice',
                    Pin: pin
                })
            });

            if (!signResponse.ok) throw new Error('Signing failed');
            
            const signData = await signResponse.json();
            document.querySelector('input[name="InvoiceSignature"]').value = signData.signature;
            
            closeSignatureModal();
            await submitToServer();

        } catch (error) {
            hideLoading();
            await showErrorMessage('Error signing document: ' + error.message);
            closeSignatureModal();
        }
    }

    function closeSignatureModal() {
        if (signatureModal) {
            signatureModal.hide();
            signatureModal = null;
        }
        
        // Clean up modal artifacts
        const backdrop = document.querySelector('.modal-backdrop');
        if (backdrop) backdrop.remove();
        
        document.body.classList.remove('modal-open');
        document.body.style.removeProperty('padding-right');
        
        // Reset the PIN input
        document.getElementById('tokenPin').value = '';
    }

    async function showSuccessMessage(message) {
        await Swal.fire({
            icon: 'success',
            title: 'Success',
            text: message,
            confirmButtonText: 'OK'
        });
    }

    async function showErrorMessage(message) {
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: message,
            confirmButtonText: 'OK'
        });
    }

    
    // Initialize event listeners when document is ready
    $(document).ready(function() {
        // Submit button event listener
        document.getElementById('submitInvoiceButton').addEventListener('click', handleSubmit);
        
        // Update status button event listener
        const updateStatusButton = document.getElementById('updateStatusButton');
        if (updateStatusButton) {
            updateStatusButton.addEventListener('click', updateDocumentStatus);
        }

        // Initialize QR Code if URL exists
        const publicUrl = '@InvoiceSummary?.PublicUrl';
        if (publicUrl) {
            generateQRCode(publicUrl);
        }

    });
</script>


