using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using Newtonsoft.Json;

public class TokenInfo
{
    [JsonProperty("tokenSerial")]
    public string TokenSerial { get; set; }

    [JsonProperty("tokenType")]
    public string TokenType { get; set; }

    [JsonProperty("certificateInfo")]
    public string CertificateInfo { get; set; }

    [JsonProperty("certificateValidFrom")]
    public DateTime CertificateValidFrom { get; set; }

    [JsonProperty("certificateValidTo")]
    public DateTime CertificateValidTo { get; set; }

    [JsonProperty("isReadyForSigning")]
    public bool IsReadyForSigning { get; set; }

    public CertificateInfo ParseCertificateInfo()
    {
        var certInfo = new CertificateInfo();
        var regex = new Regex("(?<key>[^=]+)=(?<value>[^,]+)");
        var matches = regex.Matches(CertificateInfo);

        foreach (Match match in matches)
        {
            var key = match.Groups["key"].Value.Trim();
            var value = match.Groups["value"].Value.Trim();
            
            switch (key)
            {
                case "OID.2.5.4.97":
                    certInfo.OrganizationIdentifier = value;
                    break;
                case "E":
                    certInfo.Email = value;
                    break;
                case "CN":
                    certInfo.CommonName = value;
                    break;
                case "OU":
                    certInfo.OrganizationalUnit = value;
                    break;
                case "O":
                    certInfo.Organization = value;
                    break;
                case "L":
                    certInfo.Locality = value;
                    break;
                case "S":
                    certInfo.State = value;
                    break;
                case "C":
                    certInfo.Country = value;
                    break;
            }
        }

        return certInfo;
    }
}

public class CertificateInfo
{
    public string OrganizationIdentifier { get; set; }
    public string Email { get; set; }
    public string CommonName { get; set; }
    public string OrganizationalUnit { get; set; }
    public string Organization { get; set; }
    public string Locality { get; set; }
    public string State { get; set; }
    public string Country { get; set; }
}

// Contoh penggunaan
public class ProgramX
{
    public static void XMain()
    {
        string json = @"{
            \"tokenSerial\": \"68a851e94f090043\",
            \"tokenType\": \"SoftHSM v2\",
            \"certificateInfo\": \"OID.2.5.4.97=VATEG-113317713, E=mabaega@gmail.com, CN=Test Sealing Demo, OU=Preprod EgyptEGS, O=Egypt Trust, L=Cairo, S=Cairo, C=EG\",
            \"certificateValidFrom\": \"2025-03-02 22:58:00\",
            \"certificateValidTo\": \"2026-03-02 22:58:00\",
            \"isReadyForSigning\": true
        }";

        var tokenInfo = JsonConvert.DeserializeObject<TokenInfo>(json);
        var certInfo = tokenInfo.ParseCertificateInfo();

        Console.WriteLine("Organization Identifier: " + certInfo.OrganizationIdentifier);
        Console.WriteLine("Email: " + certInfo.Email);
        Console.WriteLine("Common Name: " + certInfo.CommonName);
        Console.WriteLine("Organizational Unit: " + certInfo.OrganizationalUnit);
        Console.WriteLine("Organization: " + certInfo.Organization);
        Console.WriteLine("Locality: " + certInfo.Locality);
        Console.WriteLine("State: " + certInfo.State);
        Console.WriteLine("Country: " + certInfo.Country);
    }
}
